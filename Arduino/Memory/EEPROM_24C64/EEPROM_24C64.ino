/*  Author  - Ankur Maurya
    Created - 24 April 2021

    Program for Reading/Writing to EEPROM Memory (24C64)
    65536 bits = 8 KB of Memory Space
    Pages - 256
    Per Page - 32 bytes

    NOTE: Use 10 KOhm Pull-up resistors for both SDA and SCL data lines

    NOTE: The Arduino Wire library only has a 32 character buffer, so that is the maximun we can send using Arduino.
          This buffer includes the two address bytes which limits our data payload to 30 bytes

*/

#include <Wire.h>


const byte fileData[] PROGMEM  = {0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
                                  0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0A, 0x42, 0x55, 0x49, 0x4C, 0x44, 0x20, 0x4F,
                                  0x55, 0x54, 0x50, 0x55, 0x54, 0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4F,
                                  0x4E, 0x0A, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
                                  0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0A, 0x0A, 0x57, 0x68, 0x65, 0x6E,
                                  0x20, 0x79, 0x6F, 0x75, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x64, 0x20, 0x61, 0x6E, 0x20, 0x4A, 0x61,
                                  0x76, 0x61, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20,
                                  0x61, 0x20, 0x6D, 0x61, 0x69, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20, 0x74, 0x68,
                                  0x65, 0x20, 0x49, 0x44, 0x45, 0x0A, 0x61, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x69, 0x63, 0x61,
                                  0x6C, 0x6C, 0x79, 0x20, 0x63, 0x6F, 0x70, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x6F,
                                  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4A, 0x41, 0x52, 0x0A, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20,
                                  0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20,
                                  0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6F, 0x20, 0x79, 0x6F, 0x75,
                                  0x72, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x2F,
                                  0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x2E, 0x20, 0x54, 0x68, 0x65, 0x20,
                                  0x49, 0x44, 0x45, 0x0A, 0x61, 0x6C, 0x73, 0x6F, 0x20, 0x61, 0x64, 0x64, 0x73, 0x20, 0x65, 0x61,
                                  0x63, 0x68, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69,
                                  0x6C, 0x65, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x69, 0x6E,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
                                  0x0A, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x6D, 0x61, 0x6E, 0x69, 0x66,
                                  0x65, 0x73, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x28, 0x4D, 0x41, 0x4E, 0x49, 0x46, 0x45,
                                  0x53, 0x54, 0x2E, 0x4D, 0x46, 0x29, 0x2E, 0x0A, 0x0A, 0x54, 0x6F, 0x20, 0x72, 0x75, 0x6E, 0x20,
                                  0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6F, 0x6D,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x20, 0x6C, 0x69, 0x6E,
                                  0x65, 0x2C, 0x20, 0x67, 0x6F, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73,
                                  0x74, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x61, 0x6E, 0x64, 0x0A, 0x74, 0x79, 0x70,
                                  0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x3A,
                                  0x0A, 0x0A, 0x6A, 0x61, 0x76, 0x61, 0x20, 0x2D, 0x6A, 0x61, 0x72, 0x20, 0x22, 0x53, 0x6D, 0x61,
                                  0x6C, 0x6C, 0x4A, 0x61, 0x76, 0x61, 0x2E, 0x6A, 0x61, 0x72, 0x22, 0x20, 0x0A, 0x0A, 0x54, 0x6F,
                                  0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
                                  0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x2C, 0x20, 0x7A, 0x69, 0x70, 0x20, 0x75, 0x70,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72,
                                  0x20, 0x28, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
                                  0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x29, 0x0A, 0x61, 0x6E, 0x64, 0x20,
                                  0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5A,
                                  0x49, 0x50, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0A, 0x0A, 0x4E, 0x6F, 0x74, 0x65, 0x73, 0x3A,
                                  0x0A, 0x0A, 0x2A, 0x20, 0x49, 0x66, 0x20, 0x74, 0x77, 0x6F, 0x20, 0x4A, 0x41, 0x52, 0x20, 0x66,
                                  0x69, 0x6C, 0x65, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A,
                                  0x65, 0x63, 0x74, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x68, 0x61,
                                  0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
                                  0x2C, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
                                  0x0A, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6F, 0x70,
                                  0x69, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x69, 0x62, 0x20, 0x66,
                                  0x6F, 0x6C, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x2A, 0x20, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x4A, 0x41,
                                  0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6F, 0x70, 0x69,
                                  0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F,
                                  0x6C, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6C, 0x61,
                                  0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x20,
                                  0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x66,
                                  0x69, 0x6C, 0x65, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x2C,
                                  0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x28, 0x66, 0x6F,
                                  0x6C, 0x64, 0x65, 0x72, 0x73, 0x29, 0x0A, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x63,
                                  0x6F, 0x70, 0x69, 0x65, 0x64, 0x2E, 0x0A, 0x2A, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x6C, 0x69,
                                  0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F,
                                  0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20,
                                  0x61, 0x6C, 0x73, 0x6F, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x0A, 0x73, 0x70,
                                  0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
                                  0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2C, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74,
                                  0x65, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x68, 0x61,
                                  0x73, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x6E, 0x0A, 0x74, 0x68, 0x65, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x20,
                                  0x70, 0x61, 0x74, 0x68, 0x2E, 0x0A, 0x2A, 0x20, 0x54, 0x6F, 0x20, 0x73, 0x65, 0x74, 0x20, 0x61,
                                  0x20, 0x6D, 0x61, 0x69, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x61,
                                  0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x20, 0x4A, 0x61, 0x76, 0x61, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x2C, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2D, 0x63, 0x6C,
                                  0x69, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20,
                                  0x6E, 0x6F, 0x64, 0x65, 0x0A, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6F, 0x6A,
                                  0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x20, 0x61, 0x6E, 0x64, 0x20,
                                  0x63, 0x68, 0x6F, 0x6F, 0x73, 0x65, 0x20, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
                                  0x73, 0x2E, 0x20, 0x54, 0x68, 0x65, 0x6E, 0x20, 0x63, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x52, 0x75,
                                  0x6E, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0A,
                                  0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68,
                                  0x65, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x66, 0x69, 0x65,
                                  0x6C, 0x64, 0x2E, 0x20, 0x41, 0x6C, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6C,
                                  0x79, 0x2C, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6D, 0x61, 0x6E, 0x75, 0x61,
                                  0x6C, 0x6C, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x68, 0x65, 0x0A, 0x63, 0x6C, 0x61,
                                  0x73, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
                                  0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x2D, 0x43, 0x6C, 0x61,
                                  0x73, 0x73, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x0D, 0x0A,
                                  0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
                                  0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0A, 0x42, 0x55, 0x49, 0x4C, 0x44, 0x20, 0x4F,
                                  0x55, 0x54, 0x50, 0x55, 0x54, 0x20, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4F,
                                  0x4E, 0x0A, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D,
                                  0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0A, 0x0A, 0x57, 0x68, 0x65, 0x6E,
                                  0x20, 0x79, 0x6F, 0x75, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x64, 0x20, 0x61, 0x6E, 0x20, 0x4A, 0x61,
                                  0x76, 0x61, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20,
                                  0x61, 0x20, 0x6D, 0x61, 0x69, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20, 0x74, 0x68,
                                  0x65, 0x20, 0x49, 0x44, 0x45, 0x0A, 0x61, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x69, 0x63, 0x61,
                                  0x6C, 0x6C, 0x79, 0x20, 0x63, 0x6F, 0x70, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x6F,
                                  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4A, 0x41, 0x52, 0x0A, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20,
                                  0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20,
                                  0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6F, 0x20, 0x79, 0x6F, 0x75,
                                  0x72, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x2F,
                                  0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x2E, 0x20, 0x54, 0x68, 0x65, 0x20,
                                  0x49, 0x44, 0x45, 0x0A, 0x61, 0x6C, 0x73, 0x6F, 0x20, 0x61, 0x64, 0x64, 0x73, 0x20, 0x65, 0x61,
                                  0x63, 0x68, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69,
                                  0x6C, 0x65, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x69, 0x6E,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
                                  0x0A, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x6D, 0x61, 0x6E, 0x69, 0x66,
                                  0x65, 0x73, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x28, 0x4D, 0x41, 0x4E, 0x49, 0x46, 0x45,
                                  0x53, 0x54, 0x2E, 0x4D, 0x46, 0x29, 0x2E, 0x0A, 0x0A, 0x54, 0x6F, 0x20, 0x72, 0x75, 0x6E, 0x20,
                                  0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6F, 0x6D,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x20, 0x6C, 0x69, 0x6E,
                                  0x65, 0x2C, 0x20, 0x67, 0x6F, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73,
                                  0x74, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x20, 0x61, 0x6E, 0x64, 0x0A, 0x74, 0x79, 0x70,
                                  0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x3A,
                                  0x0A, 0x0A, 0x6A, 0x61, 0x76, 0x61, 0x20, 0x2D, 0x6A, 0x61, 0x72, 0x20, 0x22, 0x53, 0x6D, 0x61,
                                  0x6C, 0x6C, 0x4A, 0x61, 0x76, 0x61, 0x2E, 0x6A, 0x61, 0x72, 0x22, 0x20, 0x0A, 0x0A, 0x54, 0x6F,
                                  0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
                                  0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x2C, 0x20, 0x7A, 0x69, 0x70, 0x20, 0x75, 0x70,
                                  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72,
                                  0x20, 0x28, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
                                  0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x29, 0x0A, 0x61, 0x6E, 0x64, 0x20,
                                  0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x5A,
                                  0x49, 0x50, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0A, 0x0A, 0x4E, 0x6F, 0x74, 0x65, 0x73, 0x3A,
                                  0x0A, 0x0A, 0x2A, 0x20, 0x49, 0x66, 0x20, 0x74, 0x77, 0x6F, 0x20, 0x4A, 0x41, 0x52, 0x20, 0x66,
                                  0x69, 0x6C, 0x65, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A,
                                  0x65, 0x63, 0x74, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x68, 0x61,
                                  0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65,
                                  0x2C, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
                                  0x0A, 0x4A, 0x41, 0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6F, 0x70,
                                  0x69, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x69, 0x62, 0x20, 0x66,
                                  0x6F, 0x6C, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x2A, 0x20, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x4A, 0x41,
                                  0x52, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6F, 0x70, 0x69,
                                  0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x69, 0x62, 0x20, 0x66, 0x6F,
                                  0x6C, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6C, 0x61,
                                  0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x20,
                                  0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x66,
                                  0x69, 0x6C, 0x65, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x2C,
                                  0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x28, 0x66, 0x6F,
                                  0x6C, 0x64, 0x65, 0x72, 0x73, 0x29, 0x0A, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x63,
                                  0x6F, 0x70, 0x69, 0x65, 0x64, 0x2E, 0x0A, 0x2A, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x6C, 0x69,
                                  0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F,
                                  0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x70, 0x61, 0x74, 0x68, 0x20,
                                  0x61, 0x6C, 0x73, 0x6F, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x0A, 0x73, 0x70,
                                  0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
                                  0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2C, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74,
                                  0x65, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
                                  0x2D, 0x50, 0x61, 0x74, 0x68, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x68, 0x61,
                                  0x73, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x6E, 0x0A, 0x74, 0x68, 0x65, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x73, 0x20, 0x72, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x20,
                                  0x70, 0x61, 0x74, 0x68, 0x2E, 0x0A, 0x2A, 0x20, 0x54, 0x6F, 0x20, 0x73, 0x65, 0x74, 0x20, 0x61,
                                  0x20, 0x6D, 0x61, 0x69, 0x6E, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x61,
                                  0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x20, 0x4A, 0x61, 0x76, 0x61, 0x20, 0x70,
                                  0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x2C, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2D, 0x63, 0x6C,
                                  0x69, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x6A, 0x65, 0x63, 0x74, 0x20,
                                  0x6E, 0x6F, 0x64, 0x65, 0x0A, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6F, 0x6A,
                                  0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x20, 0x61, 0x6E, 0x64, 0x20,
                                  0x63, 0x68, 0x6F, 0x6F, 0x73, 0x65, 0x20, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
                                  0x73, 0x2E, 0x20, 0x54, 0x68, 0x65, 0x6E, 0x20, 0x63, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x52, 0x75,
                                  0x6E, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x65, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0A,
                                  0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68,
                                  0x65, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x66, 0x69, 0x65,
                                  0x6C, 0x64, 0x2E, 0x20, 0x41, 0x6C, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6C,
                                  0x79, 0x2C, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6D, 0x61, 0x6E, 0x75, 0x61,
                                  0x6C, 0x6C, 0x79, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x68, 0x65, 0x0A, 0x63, 0x6C, 0x61,
                                  0x73, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
                                  0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x20, 0x4D, 0x61, 0x69, 0x6E, 0x2D, 0x43, 0x6C, 0x61,
                                  0x73, 0x73, 0x20, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x0D, 0x0A
                                 };


#define EEPROM1_ADDRESS 0x54  //Address of 24C64 eeprom chip is 1010100
#define MEMORY_SIZE 8192     // 8 KB Memory
#define PAGE_SIZE 32     // 32 Bytes
#define SAFE_BUFFER_SIZE 16     // 16 Bytes
#define MEMORY_PAGES 256     // 256 Pages


void writeByte(int deviceAddress, uint16_t memoryAddress, byte data) {
  Wire.beginTransmission(deviceAddress);
  //Write 2 Byte Memory Address
  Wire.write((memoryAddress >> 8)); // MSB
  Wire.write((memoryAddress & 0xFF)); // LSB
  Wire.write(data); //Write the data
  Wire.endTransmission(); //Send stop condition
  delay(20);
}

void writePage(int deviceAddress, uint16_t memoryAddress, byte data[]) {
  /*
     The Arduino Wire library only has a 32 character buffer, so that is the maximun we can send using Arduino.
     This buffer includes the two address bytes which limits our data payload to 30 bytes.
     So here the Page write is divided in batch of 16 bytes write
  */
  byte bufferCounter = 0;

  Serial.print("Writing to Memory Addrress - ");
  Serial.println(memoryAddress, DEC);

  for (int i = 0; i < PAGE_SIZE/SAFE_BUFFER_SIZE; i++) {
    Wire.beginTransmission(deviceAddress);
    //Write 2 Byte Memory Address
    Wire.write((memoryAddress >> 8)); // MSB
    Wire.write((memoryAddress & 0xFF)); // LSB
    for (int i = 0; i < SAFE_BUFFER_SIZE; i++) {
      Wire.write(data[bufferCounter]); //Write the data
      bufferCounter++;
    }
    Wire.endTransmission(); //Send stop condition
    delay(30);

    memoryAddress += SAFE_BUFFER_SIZE;
  }

  Serial.println("Done");
}

byte readByte(int deviceAddress, uint16_t memoryAddress) {
  byte rdata = 0xFF;

  Wire.beginTransmission(deviceAddress);
  //Write 2 Byte Memory Address
  Wire.write((memoryAddress >> 8));   // MSB
  Wire.write((memoryAddress & 0xFF)); // LSB
  Wire.endTransmission();

  Wire.requestFrom(deviceAddress, 1);
  delay(10);

  if (Wire.available())
    rdata = Wire.read();
  return rdata;
}

boolean verifyDataInPage(int deviceAddress, uint16_t pageOffset, byte dataToVerify[]) {
  byte rdata = 0xFF;
  byte pageBuffer[PAGE_SIZE];

  Wire.beginTransmission(deviceAddress);
  //Write 2 Byte Memory Address
  Wire.write((pageOffset >> 8));   // MSB
  Wire.write((pageOffset & 0xFF)); // LSB
  Wire.endTransmission();

  Wire.requestFrom(deviceAddress, PAGE_SIZE);
  delay(10);

  int dataCounter = 0;
  while (Wire.available()) {
    pageBuffer[dataCounter] = Wire.read();
    dataCounter++;
  }

  for (int i = 0; i < PAGE_SIZE; i++) {
    if (pageBuffer[i] != dataToVerify[i]) {
      return false;
    }
  }
  return true;
}

void printAllMemoryPages(int deviceAddress) {
  //Print Data
  for (uint16_t i = 0; i < MEMORY_SIZE; i++) {
    Serial.write(readByte(deviceAddress, i)); //Print statement
  }

  //  int lineCntr = 0;
  //  for (uint16_t i = 0; i < MEMORY_SIZE; i++) {
  //    if (lineCntr == 8) {
  //      Serial.println("");
  //      lineCntr = 0;
  //    }
  //
  //    Serial.print(readByte(EEPROM1_ADDRESS, i), BIN); //Print statement
  //    Serial.print(" ");
  //    lineCntr++;
  //  }
  //  Serial.println("");
}

boolean verifyDataAtMemAddress(int deviceAddress, uint16_t memoryAddress, byte dataToVerify) {
  if (readByte(deviceAddress, memoryAddress) == dataToVerify) {
    return true;
  } else {
    return false;
  }
}

boolean saveToMemoryByBytes(int deviceAddress) {
  boolean allWriteVerifiedSuccess = true;
  uint16_t memoryAddress = 0;

  Serial.print("Writing Data to Memory - ");
  const int dataLen = sizeof(fileData) / sizeof(fileData[0]);
  Serial.print(dataLen, DEC);
  Serial.println(" bytes.");

  long i;
  for (i = 0; i < dataLen; i++) {
    writeByte(deviceAddress, memoryAddress, pgm_read_byte_near(fileData + i)); //Write data to memory
    //Verify data written at memory location
    if (!verifyDataAtMemAddress(deviceAddress, memoryAddress, pgm_read_byte_near(fileData + i))) {
      allWriteVerifiedSuccess = false;
    }
    memoryAddress++;
  }
  Serial.println("Data Written to Memory.");

  return allWriteVerifiedSuccess;
}

boolean saveToMemoryByPages(int deviceAddress) {
  boolean allWriteVerifiedSuccess = true;
  uint16_t pageCounter = 0;
  uint16_t memoryAddress = 0;
  byte pageBuffer[PAGE_SIZE];
  uint16_t bufferCounter = 0;
  byte data = 0;

  Serial.print("Writing Data to Memory - ");
  const int dataLen = MEMORY_SIZE; //sizeof(fileData) / sizeof(fileData[0]);
  Serial.print(dataLen, DEC);
  Serial.println(" bytes.");

  long i;
  for (i = 0; i < dataLen; i++) {
    if (bufferCounter == PAGE_SIZE) {
      pageCounter++;
      Serial.print("Writing to Page - ");
      Serial.println(pageCounter, DEC);
      writePage(deviceAddress, memoryAddress, pageBuffer); //Write data buffer to memory page
      //Verify data written to memory page
      if (!verifyDataInPage(deviceAddress, memoryAddress, pageBuffer)) {
        allWriteVerifiedSuccess = false;
        Serial.println("Verify Failed.");
      }
      bufferCounter = 0;
      memoryAddress = memoryAddress + PAGE_SIZE;
      data++;
    }
    pageBuffer[bufferCounter] = data; //pgm_read_byte_near(fileData + i);
    bufferCounter++;
  }

  if (bufferCounter > 0) {
    //Fill remaining page buffer with constant
    for (uint16_t j = bufferCounter; j < PAGE_SIZE; j++) {
      pageBuffer[bufferCounter] = 45;
      bufferCounter++;
    }

    if (bufferCounter == PAGE_SIZE) {
      pageCounter++;
      Serial.print("Writing to Page - ");
      Serial.println(pageCounter, DEC);
      writePage(deviceAddress, memoryAddress, pageBuffer); //Write data buffer to memory page
      //Verify data written to memory page
      if (!verifyDataInPage(deviceAddress, memoryAddress, pageBuffer)) {
        allWriteVerifiedSuccess = false;
        Serial.println("Verify Failed.");
      }
    }
  }
  Serial.println("Data Written to Memory.");

  return allWriteVerifiedSuccess;
}


void setup(void) {
  Wire.begin();

  Serial.begin(19200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB
  }

  delay(30000);

  //    byte data = 38;
  //    uint16_t memoryAddress = 1340;
  //    Serial.print("Writing Data : ");
  //    writeByte(EEPROM1_ADDRESS, 1342, data);
  //    Serial.println(data, DEC);
  //
  //    Serial.print("Reading Data : ");
  //    Serial.println(readByte(EEPROM1_ADDRESS, memoryAddress), DEC);

  //  boolean dataWritten = saveToMemoryByBytes(EEPROM1_ADDRESS);
  //  if (dataWritten) {
  //    Serial.println("Data Write to Memory - Success");
  //  } else {
  //    Serial.println("Data Write to Memory - Failed");
  //  }saveToMemoryByPages
  //
  //  boolean dataWritten = saveToMemoryByPages(EEPROM1_ADDRESS);
  //  if (dataWritten) {
  //    Serial.println("Data Write to Memory - Success");
  //  } else {
  //    Serial.println("Data Write to Memory - Failed");
  //  }

  printAllMemoryPages(EEPROM1_ADDRESS);



}




void loop() {}
